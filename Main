
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Collections.Concurrent;
using System.Threading;
using System.Threading.Tasks;

namespace Main
{
    public class Program
    {
        public static void Main(string[] args)
        {
            //Your code goes here
            Producer cq = new Producer(new ConcurrentQueue<int>());
            cq.produce();
            Consumer hi = new Consumer();
            hi.removeMax(cq);
            hi.removeMin(cq);
            foreach(Object obj in cq.queue){
        Console.WriteLine("value: {0}", obj);
    }
        }
    }
}
public class Producer { 
    public ConcurrentQueue<int> queue;
    static int seq; 
    public Producer( ConcurrentQueue<int> queue) { this.queue = queue; }

public void produce()
{
    Random rd = new Random();
    while (seq++ < 10)
    {  
        int rand_num = rd.Next(0,200);
        queue.Enqueue(rand_num);
        Console.WriteLine("item: {0} value: {1}", seq, rand_num);                
    }
}
}

public class Consumer { 
    int max;
    int min;
    public Consumer() {
    }

public void removeMax(Producer produce)
{
   var max = produce.queue.Max();
   produce.queue = new ConcurrentQueue<int>(produce.queue.Where(x => x != max));
    Console.WriteLine("New queue with max removed: {0}",max);
    foreach(Object obj in produce.queue){
        Console.WriteLine("value: {0}", obj);
    }
}
    public void removeMin(Producer produce)
{
   var min = produce.queue.Min();
   produce.queue = new ConcurrentQueue<int>(produce.queue.Where(x => x != min));
        Console.WriteLine("New queue with min removed: {0}",min);
    foreach(Object obj in produce.queue){
        Console.WriteLine("value: {0}", obj);
    }
}
}
   
    
